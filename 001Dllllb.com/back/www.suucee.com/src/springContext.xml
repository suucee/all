<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">    
    
    <context:component-scan base-package="com.maxivetech.backoffice.*"></context:component-scan>
	<context:component-scan base-package="com.suucee.www.*"></context:component-scan>
    <!-- 开启这个配置，spring才能识别@Scheduled注解   -->
<!--     <task:annotation-driven scheduler="qbScheduler" mode="proxy" />  
    <task:scheduler id="qbScheduler" pool-size="10" />   -->
	<!-- c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 数据库连接   59.188.0.26-->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/www_suucee_com?useUnicode=true&amp;characterEncoding=utf8" />
		<property name="user" value="suucees" />
		<property name="password" value="suucees" />
		

		<!-- c3p0 配置 -->
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="autoCommitOnClose" value="false" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
			但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。
			Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="checkoutTimeout" value="5000" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。
			Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<property name="loginTimeout" value="1800" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。
			Default: 45 -->
		<property name="maxPoolSize" value="90" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。
			若为0则永不丢弃。
			Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<property name="maxStatements" value="100" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
			但由于预缓存的statements 属于单个connection而不是整个连接池。
			所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。
			Default: 0 -->
		<property name="maxStatementsPerConnection" value="100" />
		<property name="numHelperThreads" value="3" />
		<property name="propertyCycle" value="300" />
		<property name="preferredTestQuery" value="true" />
		<property name="testConnectionOnCheckin" value="true" />
 		<!--因性能消耗大请只在需要的时候使用它。
 			如果设为true那么在每个connection提交的 时候都将校验其有效性。
 			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。
 			Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<property name="usesTraditionalReflectiveProxies" value="false" />
	</bean>
	<!-- 配置数据源结束 -->
	
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />	
	<!-- 配置session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 引用的数据库 -->
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- session -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- 后台输出SQL语句 -->
				<prop key="hibernate.show_sql">false</prop>
				<!-- 后台输出SQL语句时格式化 -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 数据库表的操作 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的，
				就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
          		所以把它设置为none即可 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<!-- 自动扫描的包 -->
		<property name="packagesToScan">
			<list>
				<value>com.maxivetech.backoffice.entity</value>
				<value>com.suucee.www.entity</value>
			</list>
		</property>
		
	</bean>
	
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	
	

	<!-- hibernate4 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>	
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>messages</value>
		</property>
	</bean>
</beans>